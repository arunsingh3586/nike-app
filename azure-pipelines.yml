# trigger:
#   branches:
#     include:
#       - main
# pool:
#   vmImage: ubuntu-latest
 
# stages:
#   - stage: Build 
#     jobs:
#       - job: Build
#         steps:
#           - task: Npm@1
#             displayName: NPM install
#             inputs:
#               command: custom
#               customCommand: install -D tailwindcss postcss autoprefixer

#           - task: Npm@1
#             displayName: NPM Build
#             inputs:
#               command: custom
#               customCommand: run build

#           - task: Npm@1
#             inputs:
#               command: 'publish'
#               workingDir: './dist'
#               publishRegistry: 'useFeed'
#               publishFeed: 'ea13d37a-e46b-4751-ae29-0ca5d5b44c4c/b38911da-fcab-42ca-a2e1-2732fc90ed0e'


trigger:
  branches:
    include:
      - none

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'singhdocker2110/nike-landing-page'
  # tag: '$(Build.BuildId)'
  tag: latest
  aksResourceGroup: 'Nik_group'
  aksCluster: 'arun-cluster'
  namespace: 'default'
  Docker-SC: 'docker-svn'
  ARM-SC: 'nike-svc'

stages:
# =========================
# Stage 1: Build & Push
# =========================
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build and Push
    steps:
    - task: Npm@1
      displayName: NPM Install
      inputs:
        command: custom
        customCommand: install -D tailwindcss postcss autoprefixer

    - task: Npm@1
      displayName: NPM Build
      inputs:
        command: custom
        customCommand: run build

    - task: Docker@2
      displayName: Docker Login
      inputs:
        command: login
        containerRegistry: $(Docker-SC)

    - task: Docker@2
      displayName: Docker Build
      inputs:
        command: build
        containerRegistry: $(Docker-SC)
        repository: $(imageName)
        Dockerfile: '**/Dockerfile'
        buildContext: '.'
        arguments: '--progress=plain'
        tags: |
          $(tag)
          latest
   #docker build -t arun-app:v1 .
    - task: Docker@2
      displayName: Docker Push
      inputs:
        command: push
        containerRegistry: $(Docker-SC)
        repository: $(imageName)
        tags: |
          latest
          $(tag)
# docker push dh-id/arun-app:v1
# =========================
# Stage 2: Deploy to AKS
# =========================
- stage: Deploy
  displayName: Deploy App to AKS
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    steps:
    - task: AzureCLI@2
      displayName: Deploy to AKS Cluster
      inputs:
        azureSubscription: $(ARM-SC)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Get AKS Credentials"
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksCluster) --overwrite-existing



          echo "Deploying to AKS from DockerHub"
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nike-landing
            namespace: default
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nike-landing
            template:
              metadata:
                labels:
                  app: nike-landing
              spec:
                containers:
                - name: nike-landing
                  image: docker.io/singhdocker2110/nike-landing-page:$(tag)
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nike-landing-svc
            namespace: default
          spec:
            type: LoadBalancer
            selector:
              app: nike-landing
            ports:
            - port: 80
              targetPort: 80
          EOF
                  
                     
                      
